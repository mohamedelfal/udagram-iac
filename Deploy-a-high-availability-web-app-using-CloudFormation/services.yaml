AWSTemplateFormatVersion: 2010-09-09
Description: Udacity DevOps engineer nanodegree project 2 ( Highly scalable website).

  Services infrastructure

  Create a Launch Configuration in order to deploy four servers, two located in each of
  your private subnets. The launch configuration will be used by an auto-scaling group.
  You'll need two vCPUs and at least 4GB of RAM. The Operating System to be used is
  Ubuntu 18. So, choose an Instance size and Machine Image (AMI) that best fits this spec
  Be sure to allocate at least 10GB of disk space so that you don't run into issues.

Parameters:
  Environment:
    Description: Environment name, used as a prefix for resources
    Type: String

  Project:
    Description: Project name, used for resources tagging
    Type: String

  WebServerImageId:
    Description: Web serve image id
    Type: String
    Default: ami-00a54827eb7ffcd3c # Ubuntu Server 18.04 LTS

  WebServerVolumeSize:
    Description: Web server disk volume size
    Type: String
    Default: 10

  WebServerInstanceType:
    AllowedValues:
      - t2.nano
      - t2.medium
      - t2.large
      - t3.medium
      - t3.large
      - t3.xlarge
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
    ConstraintDescription: Web server instance type. t2.nano - dev instance, t3.medium - default
    Default: t3.medium
    Description: WebServer EC2 instance type
    Type: String

  CPUUsagePercentPolicyTargetValue:
    Description: Average CPU utilization
    Type: String
    Default: 75.0

  ALBRequestCompleteCountTargetValue:
    Description: Number of requests completed per target in an Application Load Balancer target group.
                How many requests the application can handle per instance
    Type: String
    Default: 3

Resources:

  # An IAM role is an IAM identity that you can create in your account that has specific permissions.
  # An IAM role is similar to an IAM user, in that it is an AWS identity with permission policies
  # that determine what the identity can and cannot do in AWS. However, instead of being uniquely
  # associated with one person, a role is intended to be assumable by anyone who needs it. Also,
  # a role does not have standard long-term credentials such as a password or access keys associated
  # with it. Instead, when you assume a role, it provides you with temporary security credentials
  # for your role session

  # Web server Role
  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  # An instance profile is a container for an IAM role that you can use to pass role information
  # to an EC2 instance when the instance starts.
  ProfileWithRolesForApp:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref UdacityS3ReadOnlyEC2

  # The LaunchConfiguration resource specifies the Amazon EC2 Auto Scaling launch
  # configuration that can be used by an Auto Scaling group to configure Amazon EC2
  # instances.


  # ----------------- EC2 ------------------

  # The LaunchConfiguration resource specifies the Amazon EC2 Auto Scaling launch configuration
  # that can be used by an Auto Scaling group to configure Amazon EC2 instances
  WebAppServer:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
      ImageId: !Ref WebServerImageId
      IamInstanceProfile: !Ref ProfileWithRolesForApp
      SecurityGroups:
      - Fn::ImportValue:
          !Sub "${Project}-AppSecurityGroupID"
      InstanceType: !Ref WebServerInstanceType
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: !Ref WebServerVolumeSize


  # ------------ Resource groups -----------

  # Specifies a target group for an Application Load Balancer or Network Load Balancer.
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: / # physical file path check.
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 7
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${Project}-VPCID"

  # Defines an Amazon EC2 Auto Scaling group with the specified name and attributes.
  WebAppServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      # Private Subnets
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${Project}-Private-Subnet-IDs
      LaunchConfigurationName: !Ref WebAppServer
      MinSize: '2'
      MaxSize: '4'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
      Tags:
        - Key: Name
          Value: EC2-Instance
          PropagateAtLaunch: true
        - Key: Project
          Value: !Ref Project
          PropagateAtLaunch: true


# ------------ Load balancer ---------------

  # Specifies an Application Load Balancer or a Network Load Balancer
  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub ${Project}-Public-Subnet-1-ID
      - Fn::ImportValue: !Sub ${Project}-Public-Subnet-2-ID
      SecurityGroups:
      - Fn::ImportValue: !Sub ${Project}-LBSecurityGroupID
      Tags:
        - Key: Name
          Value: Load Balancer
        - Key: Project
          Value: !Ref Project

  # Specifies a listener for an Application Load Balancer or Network Load Balancer
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref WebAppLoadBalancer
      Port: '80'
      Protocol: HTTP

  LoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1


#---------------- Scaling Policies ---------------

# When you configure dynamic scaling, you define how to scale the capacity of your
# Auto Scaling group in response to changing demand. For example, let's say that you
# have a web application that currently runs on two instances, and you want the CPU
# utilization of the Auto Scaling group to stay at around 50 percent when the load
# on the application changes. This gives you extra capacity to handle traffic spikes
# without maintaining an excessive number of idle resources. You can configure your
# Auto Scaling group to scale dynamically to meet this need by creating a scaling policy.
# Amazon EC2 Auto Scaling can then scale out your group (add more instances) to deal
# with high demand at peak times, and scale in your group (run fewer instances) to reduce
# costs during periods of low utilization

  # Specifies an Amazon EC2 Auto Scaling scaling policy so that the Auto Scaling group
  # can change the number of instances available for your application in response to
  # changing demand. If you create either a step scaling policy or a simple scaling policy,
  # you must also create a CloudWatch alarm that monitors a CloudWatch metric for your
  # Auto Scaling group. Note that you can associate a CloudWatch alarm with only one
  # scaling policy
  WebServerCPUPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebAppServerGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref CPUUsagePercentPolicyTargetValue

  WebServerRequestCountPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebAppServerGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ALBRequestCountPerTarget
          ResourceLabel: !Join
            - '/'
            - - !GetAtt WebAppLoadBalancer.LoadBalancerFullName
              - !GetAtt WebAppTargetGroup.TargetGroupFullName
        TargetValue: !Ref ALBRequestCompleteCountTargetValue

# -------------Output ------------


Outputs:

  DNS:
    Description: The website URL
    Value:
      !Sub
        - 'http://${DNSName}'
        - {DNSName: !GetAtt 'WebAppLoadBalancer.DNSName'}
    Export:
      Name: !Sub "${Project}-SiteURL"

